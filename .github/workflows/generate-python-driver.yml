on: [ workflow_call ]

env:
  SPEC_DIR: ${{ github.workspace }}/specs_preprocessed
  PYTHON_DIR: ${{ github.workspace }}/sdks/python
  VERSION: 0.0.1
  SPECIFICATIONS: |
    consolidated-analytics-apis,
    data-handling-apis,
    data-intake-apis,
    data-version-export-apis,
    direct-data-intake-apis,
    document-search-apis,
    model-query-apis,
    object-configuration-apis,
    permission-management-apis,
    profile-management-apis,
    project-management-apis,
    system-status-apis,
    tenant-management-apis,
    user-management-apis

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: ubuntu-latest
    env:
      ORIG_SPEC_DIR: ${{ github.workspace }}/res
      PREPROCESS: true

    steps:
      - uses: actions/checkout@v4

      - name: Preprocess OpenAPI specs
        if: env.PREPROCESS == 'true'
        id: preprocess
        run: |
          python3 -m pip install -r $PYTHON_DIR/processing/requirements.txt
          python3 $PYTHON_DIR/processing/spec_preprocessing.py $ORIG_SPEC_DIR $SPEC_DIR
          echo "SPEC_DIR=$SPEC_DIR" >> $GITHUB_ENV

      - name: Upload artifact processed specs
        uses: actions/upload-artifact@v3
        with:
          name: processed-specs-${{env.VERSION}}
          path: ${{ env.SPEC_DIR }}
          retention-days: 1

  generate-python-specification:
    name: Generate Python SDK
    runs-on: ubuntu-latest
    needs: setup-environment
    container:
      image: openapitools/openapi-generator-cli:latest
    env:
      PACKAGE_PREFIX: visier.sdk.api
      PACKAGE_DIR: ${{ github.workspace }}/specs_preprocessed
      SDK_REPO_DIR: ${{ github.workspace }}/sdks/generated

    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y git
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash
          apt install -y nodejs
          apt-get install -y python3 python3-pip
          pip install tox

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: processed-specs-${{env.VERSION}}
          path: ${{ env.SPEC_DIR }}

      - uses: actions/checkout@v4

      - name: Create Python SDK version branch
        run: |
          git config --global url."https://api:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
          if [ ! -d "$SDK_REPO_DIR" ]; then
            git clone https://github.com/visier/python-sdk.git $SDK_REPO_DIR
            cd $SDK_REPO_DIR
            git checkout -b versions/$VERSION
            git push origin versions/$VERSION
          else
            echo "Directory $SDK_REPO_DIR already exists. Using the existing directory."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Python SDK for all specifications
        run: |
          SPECIFICATION_LIST=$(echo $SPECIFICATIONS | tr ',' '\n')
          for specification in $SPECIFICATION_LIST; do
            echo "Processing $specification"
            spec_file="$SPEC_DIR/${specification}.yaml"
            package_name="$PACKAGE_PREFIX.$(echo "$specification" | sed 's/-apis$//; s/-/_/g')"
            output_dir="$SDK_REPO_DIR/src/$package_name"
          
            # Extract the version from the OpenAPI spec file          
            mkdir -p $output_dir
            docker-entrypoint.sh generate \
              -i "$spec_file" \
              -g python \
              -t $PYTHON_DIR/templates \
              --package-name "$package_name" \
              -o "$output_dir" \
              --skip-validate-spec \
              --additional-properties=packageVersion="$VERSION"
          done

      # Pushing before tests to have the code available for debugging
      - name: Push Python SDK branch
        run: |
          git config --global url."https://api:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
          git config --global user.email "shmalikov@gmail.com"
          git config --global user.name "Shmalikov"
          cd $SDK_REPO_DIR
          ls .
          git add *
          git commit -m "Autogenerated Python SDK version $VERSION"
          git push origin versions/$VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        run: |
          error_flag=0
          find "$SDK_REPO_DIR/src/" -type d -name "${PACKAGE_PREFIX}*" -print | 
          while read -r dir; do
            (cd "$dir" && tox)
            if [ $? -ne 0 ]; then
              error_flag=1
            fi
          done
          exit $error_flag